# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'  # Python version to use

      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Install dependencies

      - name: Install Xvfb
        run: |
          sudo apt-get install -y xvfb  # Install X virtual framebuffer

      - name: Start Xvfb and run tests
        run: |
          Xvfb :99 -ac &  # Start Xvfb on display :99
          export DISPLAY=:99  # Set the DISPLAY environment variable
          mkdir -p coverage  # Create coverage directory
          pytest --cov=./ --cov-report=xml:coverage/coverage.xml --cov-report=html:coverage/htmlcov tests/  # Execute tests with coverage

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Ensure the SONAR_TOKEN secret is set in your repository
        with:
          # Additional arguments for the SonarScanner CLI
          args: |
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            -Dsonar.projectKey=MedFrio_TP_application_de_gestion_de_budget
            -Dsonar.organization=medfrio
            -Dsonar.python.coverage.reportPaths=coverage/coverage.xml  # Path to the coverage report generated by pytest
            # Exclude test files from main source files
            -Dsonar.exclusions=**/tests/**  # Exclude all test files from the main source analysis
            # Set sources to avoid duplication
            -Dsonar.sources=src  # Adjust this to your actual source directory
            -Dsonar.tests=tests  # Include the test directory for analysis
            -Dsonar.test.inclusions=**/tests/**  # Explicitly include test files
          projectBaseDir: .  # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
